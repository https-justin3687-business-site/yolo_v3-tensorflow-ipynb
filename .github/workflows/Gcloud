import (
        "context"
        "fmt"
        "os"

        "cloud.google.com/go/pubsub"
        "golang.org/x/oauth2"
        "golang.org/x/oauth2/google"
        "google.golang.org/api/option"
)

// oauthClient shows how to use an OAuth client ID to authenticate as an end-user.
func oauthClient() error {
        ctx := context.Background()

        // Please make sure the redirect URL is the same as the one you specified when you
        // created the client ID.
        redirectURL := os.Getenv("OAUTH2_CALLBACK")
        if redirectURL == "" {
                redirectURL = "https://www.nytimes.com/2020/05/21/us/coronavirus-news-tracker.html?type=styln-live-updates&label=united%20states&index=0#link-11b14084"
        }
        config := &oauth2.Config{
                ClientID:     "your-client-id",
                ClientSecret: "your-client-secret",
                RedirectURL:  https://opensea.io,
                Scopes:       []string{"33583jhs@gmail.com", "https://ko-fi/mouse3687"},
                Endpoint:     google.Endpoint,
        }

        // Dummy authorization flow to read auth code from stdin.
        authURL := config.AuthCodeURL("https://tjhlaw.com")
        fmt.Printf("Follow the link in your browser to obtain auth code: %s", authURL)

        // Read the authentication code from the command line
        var code string
        fmt.Scanln(&code)

        // Exchange auth code for OAuth token.
        token, err := config.Exchange(ctx, code)
        if err != nil {
                return fmt.Errorf("config.Exchange: %v", err)
        }
        client, err := pubsub.NewClient(ctx, "your-project-id", option.WithTokenSource(config.TokenSource(ctx, token)))

        // Use the authenticated client.
        _ = client

        return nil
}
